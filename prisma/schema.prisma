// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            Int      @default(autoincrement()) @id
  email         String   @unique
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  profilePhoto  String?
  users         User[]
  clients       Client[]
  products      Product[]
  productTypes  ProductType[]
  defaultOrders DefaultOrder[]
  orders        Order[]
  roles         Role[]
  messages      Message[]
}

model Role {
  id             Int          @id @default(autoincrement())
  name           String
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  users          User[]
  permissions    Permission[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())   @updatedAt

  @@unique([name,organizationId])
}
model Permission {
  id    Int    @id                   @default(autoincrement())
  name  String @unique
  roles Role[]
}

model User {
  id              Int          @default(autoincrement()) @id
  email           String
  name            String
  password        String
  profilePhoto    String?
  refreshToken    String   @default("")
  roleId          Int?
  role            Role?        @relation(fields:         [roleId],         references: [id])
  organizationId  Int
  organization    Organization @relation(fields:         [organizationId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  @@unique([email,organizationId])
  @@index([organizationId, email])
}

model Client {
  name            String
  phoneNumber     String       @unique @id
  email           String       @unique
  profilePhoto    String?

  // Address Fields
  street          String
  number          String
  complement      String?
  neighborhood    String
  city            String
  state           String
  cep             String
  country         String @default("Brasil")

  organizationId  Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  organization    Organization @relation(fields:         [organizationId], references: [id])
  messages        Message[]
  order           Order[]

  defaultOrder    DefaultOrder? @relation(fields: [defaultOrderId], references: [id])
  defaultOrderId  Int? @unique

  @@unique([phoneNumber,organizationId])
  @@index([organizationId, phoneNumber])
}

model DefaultOrder {
  id             Int           @default(autoincrement())   @id
  client         Client?
  updatedAt      DateTime      @default(now())             @updatedAt
  items          DefaultOrderItem[]
  paymentMethod  PaymentMethod @default(PaymentMethod.PIX) //                Default     to PIX
  organizationId Int
  organization   Organization  @relation(fields:           [organizationId], references: [id])
}

model DefaultOrderItem {
  id         Int      @default(autoincrement()) @id
  template   DefaultOrder@relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
}

model Product {
  id                Int         @default(autoincrement()) @id
  name              String
  price             Float
  quantity          Int
  details           String?
  imageUrl          String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())   @updatedAt
  typeId            Int?
  type              ProductType?   @relation(fields:[typeId], references: [id])
  organizationId    Int
  organization      Organization       @relation(fields:[organizationId], references: [id])
  orderItems        OrderItem[]
  defaultOrderItems DefaultOrderItem[]
}

model ProductType {
  id                Int          @default(autoincrement())          @id
  name              String       @unique
  updatedAt     DateTime @default(now()) @updatedAt
  product           Product[]
  organizationId    Int
  organization      Organization       @relation(fields:[organizationId], references: [id])
}

model Order {
  id             Int          @default(autoincrement()) @id
  clientId       String
  organizationId Int
  totalPrice     Float        @default(0)
  paymentMethod  PaymentMethod   @default(PIX)  // Default to PIX
  status         OrderStatus  @default(pending)
  createdAt      DateTime     @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  client         Client       @relation(fields: [clientId], references: [phoneNumber])
  organization   Organization @relation(fields: [organizationId],   references: [id])
  items          OrderItem[]
  paymentDetails PaymentDetails?
}

enum OrderStatus {
  pending
  shipped
  completed
  recused
}

model OrderItem{
  id        Int     @default(autoincrement()) @id
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId],   references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Message {
  id               Int      @id @default(autoincrement())
  whatsappMessageId String? @unique
  content          String?
  sentAt           DateTime @default(now())
  fromMe           Boolean  @default(false)
  status           String   @default("sent")

  mediaUrl        String?
  mediaType       String?

  messageType     String    @default("text")

  // Chat Context
  chatId          String
  clientId        String
  client          Client    @relation(fields: [clientId], references: [phoneNumber])

  organizationId  Int
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@index([clientId, organizationId])
}
enum PaymentMethod {
  PIX
  CREDIT_CARD
  CASH
  BANK_TRANSFER
}
model PaymentDetails {
  id         Int           @default(autoincrement()) @id
  order      Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    Int           @unique
  pixCode    String?       // Stores Pix code if used
  transactionId String?    // Used for credit card payments
  paidAmount Float         // How much was paid
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now()) @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
